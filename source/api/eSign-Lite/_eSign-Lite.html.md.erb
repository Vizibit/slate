# **eSign-Lite workflow API**

## eSign-Lite workflow introduction

Simple signature workflow integration enables 3rd party systems to easily integrate digital signature in their application, with minimal changes to the their existing codebase.

This integration is targeted for existing systems that already have an UI, and want to add the digital signature support.

####Components
The integration consist of two main components: **"Signature workflow API"** and the **"eSign-Lite JS SDK"**

- **Signature workflow API** - Exposes an API endpoint that receives the document for signature and two callbacks (OnSignedCallback and OnErrorCallback)
- **eSign-Lite JS SDK** - Javascript library that handles the PDF viewing, and the user input required to complete the remote signature

The application can be used in a **cloud environment** or a **on-premise** installation.

###Diagram
As seen in the diagram below, the integration flow is as follows:

1. Your frontend UI application request a PDF document signature from your backend
2. Your backend prepares the PDF document, and defines the **OnSignedCallback and OnErrorCallback** callbacks.
After everything is prepared your backend sends a **HTTP POST** request to "**Signature workflow API**" `{{GATEWAYHOST}}/v/1/signature/workflow/pdf/simple`, and if everything is correct the API responds with a object that contains a "**StorageId**" and "**SignatureToken**"
3. Your backend communicates the "**StorageId**" and "**SignatureToken**" to your frontend UI application
4. Your frontend UI constructs the "**eSign-Lite JS SDK**" with the received "**StorageId**" and "**SignatureToken**"
5. The "**eSign-Lite JS SDK**" guides the user journey, offering him to add a signature image, to perform a user identification (e.g. video, autoident) if he doesn't have an account and perform the communication with our "**eSign-Lite API**"
6. When the signature is successful or failed, the "**eSign-Lite API**" notifies the "**Signature workflow API**" about the signature status
7. The "**Signature workflow API**" executes the correct callback to **notify your backend** about the signature status


![eSign-Lite Workflow api](images/simple_signer_workflow_diagram.png)

##Signature workflow API
`POST {{GATEWAYHOST}}/v/1/signature/workflow/pdf/simple`

> JSON body request example (content-type: application/json):

```json
{
  "Document": "{{PDF file for signature [base64]}}",
  "OnSignedCallback": "{{Signed document callback url}}",
  "OnErrorCallback": "{{Signing error callback url}}"
  "ExpiresAt": "{{Unix UTC timestamp for expiry}}"
  "HttpAuthorizationHeader": "{{HTTP authorization header value}}"
  "HttpMethod": "{{POST or PUT, POST is the default value}}"
  "SkipSeal": "{{true or false, default value is false}}"
  "SignatureImage": {
      "Page": 0,
      "WidgetOffsetX": 200,
      "WidgetOffsetY": 350,
      "WidgetHeight": 75,
      "WidgetWidth": 150,
      "ImageData":"Signature image base64 string",
      "LineOne": "Line 1",
      "LineTwo": "Line 2",
      "Appearance": "CARD"
  }
}
```
The API consists of 3 required fields: "**Document**", "**OnSignedCallback**", "**OnErrorCallback**".

- **Document** - PDF document for signature in **base64** encoding (**with padding**)
- **OnSignedCallback** -The "Signature workflow API" will call this url with HTTP POST or PUT, this will be called when the signature is **successful**.
- **OnErrorCallback** - The "Signature workflow API" will call this url with HTTP POST or PUT, this will be called when the signature is **not successful**.
- **HttpAuthorizationHeader** - The caller can define the 'Authorization' header, the header will be used to authenticate to the service. If you leave this empty no authorization header will be sent. **This is an optional field**.
- **HttpMethod** - The caller can define if they want to use the HTTP POST or HTTP PUT method. If you leave this empty HTTP POST will be used. **This is an optional field**.

Additionally the API exposes an additional optional fields.

- **SkipSeal** - If the automatic seal is configured, it's possible to skip the addition of the seal
- **ExpiresAt**  - ExpiresAt determines until when the document is available for signature, default value is 2 days from submission. **After the period expires and the document is not signed the document is automatically deleted from the API**
- **SignatureImage** - You can optionally send the signature image definition in your workflow request. This signature image will only be used if you supply the **workflow_id** in the query parameter of the esign-lite frontend call.

###StorageId and SignatureToken
> If successful the above command returns JSON structured like this (content-type: application/json):

```json
{
  "StorageId": "{{Vizibit system generated storage id}}",
  "SignatureToken": "{{Vizibit system generated signature token}}",
  "WorkflowId": "{{Internal workflow id}}"
}

```
"StorageId" and "SignatureToken" are **Vizibit generated ids** that are **solely used by Vizibit**.

Your application only needs to communicate the described fields to the "eSign-Lite JS SDK" constructor.

The **WorkflowId** is returned on all requests so we can know exactly the workflow in question in case we need to do additional debugging.
**WorkflowId** is also used to exchange the predefined signature image and the esign-lite frontend.

###Predefined signature image and esign-lite frontend
The predefined signature image in the **SignatureImage** field of the `POST {{GATEWAYHOST}}/v/1/signature/workflow/pdf/simple` will not be used if you don't supply the
**workflow_id** query parameter in the esign-lite frontend call.

**Positioning of the signature image**

The image below explains how the signature image/seal positioning option.

When sending parameters to determine the position of the signature image, it is needed to convert your current viewport to a PDF viewport.

An example of a PDF document in figure below is shown in a coordinate system in dimensions of 612x792 units (A4 document). One unit in the PDF coordinate system is 1/72 of an inch.

The parameters to be sent are:

* **WidgetOffsetX** (label in the image **LLX**)
* **WidgetOffsetY** (label in the image **LLY**) as coordinates of the lower left corner of the widget
* **WidgetHeight** (label in the image **HEIGHT**)
* **WidgetWidth** (label in the image **WIDTH**) as information about widget height and width in the coordinate system of the PDF document

![Signature positioning image 1](https://mobile.signator.hr/img/slika_10_api_doc.png)


> Example of the constructed esign-lite frontend url with the **workflow_id** parameter:

```
GET {{GATEWAYHOST}}?workflow_id={{WorkflowId}}&storage_id={{StorageId}}&signature_token={{SignatureToken}}

```

###Callbacks
> Callback response "OnSignedCallback"

```http
POST {{OnSignedCallback}} HTTP/1.1
Content-Type: application/pdf

{{BINARY data containing the signed PDF document}}
```

> Callback response "OnErrorCallback"

```http
POST {{OnErrorCallback}} HTTP/1.1
Content-Type: application/json

{
  "Type": "Error",
  "Description": "{{Error description}}",
  "Code": "{{ErrorCode}}",
  "WorkflowId": "{{Internal workflow id}}"
}

```
**Callbacks** are URLs that point to your backend system, and allow us to **asynchronously** return the status of the signing operation.

You can attach an additional query parameter to callback urls so you can identify for which signature you received the response. You can choose any number of query parameters, and there are no reserved query parameters from our side for the callback urls

**For example a sample callback:**

- https://esign-lite-demo.signator.eu/callback?document_id=**{your_internal_document_id}**&authorization_token=**{your_authorization_token}**

The callback bodies are defined in the right column, as for the error codes the actual codes can be found at the end of this document.

Additional authentication protocols can be supported **on a on premise** installation.

Callback **OnErrorCallback** [error codes](#error-codes)

**Callback retries**

When the signature is finished or faulted our API will call your callback, in the scenario that your API is not available the application will retry in the following intervals:

- After 1 second
- After 10 second
- After 60 second
- After 10 minutes
- After 30 minutes
- After 1 hour
- After 12 hours
- After 36 hours

---

##Error codes

All errors return the HTTP status code 400, unless an unforeseen situation has occurred. In that case HTTP status code is 500.

All errors are returned as **JSON**.

List of possible errors on eSign-Lite workflow interface

Error Code | Meaning
---------- | -------
1001 | SignatureToken has expired
30001 | Unable to create the requested workflow. Internal error
30002 | Unable to map the request to the internal object (Check for syntax errors)
30003 | Signature has been rejected by the signer
30004 | Signature has expired
30005 | Request body must be present
30006 | Request 'OnErrorCallback' must be defined
30007 | Request 'OnSignedCallback' must be defined
30008 | Request 'Document' must be defined
30009 | 'ExpiresAt' parameter is not valid (Most likely the timestamp has already expired)
30014 | Request 'Document' is not a PDF
30015 | Document doesn't exist
30016 | Document deleted
30017 | Document not readable

In case of an error, the processing is interrupted and the error response is returned to the caller.

##PDF signature type

**Cloud version**

- The APIs only produce **LTA** signatures
- **SHA256** is used as the hashing algorithm


**on-premise version**

- Supported signature levels: **B, T, LT, LTA**
- **SHA256** is used as the hashing algorithm (can be changed depending on the clients needs, **SHA1 is not supported**)

##Security

- Every file uploaded to any of our APIs is encrypted using an **AES256** encryption (**at rest**)
- The encryption can be upgraded depending the clients wishes (applies to the on-premise installation)
- When using the cloud version of the API the keys are stored in the **Azure Key vault**, with the on-premise installation the key can be secured using the clients available security practices
- All our APIs are secured using a valid SSL certificate
- The client is responsible for adequate care of the supplied JWT token
- Data required for the signature purposes is never transmitted in plaintext, and the operation data is stored for audit trail purposes and the data processing can be seen in our Privacy policy

#Local component signing

##Pin caching

> Open PIN cache window

```js
window.open("https://local.signumid.hr:7439/pin-caching", "_blank");

```

Show the page to cache the PIN in the local component.

**When opening the PIN cache page open it in JavaScript with the provided snippet, otherwise the window wil not close itself.**

PIN cache page:
[https://local.signumid.hr:7439/pin-caching](https://local.signumid.hr:7439/pin-caching)


##Checking pin caching status
> Check PIN cache call

```http
GET https://local.signumid.hr:7439/v/1/cached/pin/status HTTP/1.1
Content-Type: application/json

```

> Check PIN cache response

```json
{
  "pinAgeInSeconds": 12,
  "maxAgeInSeconds": 900
}

```
Use the provided endpoint to check if the PIN is still cached.

If the PIN is cached you will receive the information about how long will the PIN be cached and how long has it been cached.

- **pinAgeInSeconds**: Current time in seconds for how long the PIN has been cached
- **maxAgeInSeconds**: When will the PIN cache expire, maximum duration of the PIN cache

##Perform signature
> Sign a document in a workflow

```http
POST https://local.signumid.hr:7439/v/1/local/silent/sign HTTP/1.1
Content-Type: application/json

{
  "SignatureToken": "{SignatureToken}",
  "BaseUrl": "{UrlSignatueBackend}"
}

```
**The PIN needs to be cached before attempting to sign a document.**


Sign the document using the certificate on the connected smart card/token.

If the signature is successful the response will be HTTP 204 with an empty response.

SignatureToken is acquired from: [Workflow API](#storageid-and-signaturetoken)

##Perform sealing
> Seal a document in a workflow

```http
POST https://local.signumid.hr:7439/v/1/local/silent/seal HTTP/1.1
Content-Type: application/json

{
  "SignatureToken": "{SignatureToken}",
  "BaseUrl": "{UrlSignatueBackend}"
}

```

Seal the document using the preconfigured electronic seal certificate.
If the sealing is successful the response will be HTTP 204 with an empty response.

SignatureToken is acquired from: [Workflow API](#storageid-and-signaturetoken)

##Local component error codes

All errors return the HTTP status code 400, unless an unforeseen situation has occurred. In that case HTTP status code is 500.

All errors are returned as **JSON**.

List of possible errors on local component signing

Error Code | Meaning
---------- | -------
1|UnhandledException
2|UnableToStartSignature
3|UnableToStartSeal
4|UnableToGetLocalComponentSignatureLink
5|UnableToFinishSeal
6|UnableToFinishSignature
7|PinNotCached
8|CachedCertificateNotFound
9|SignatureTimedOut

In case of an error, the processing is interrupted and the error response is returned to the caller.


#Using the prebuild signer
If you don't want to perform a integration of our JS API in your application, you can use our prebuilt signer.

The signer allows you to perform the signature in a new webpage without the need for coding in your existing UI.

###Usage
```json
{
  "StorageId": "{{Vizibit system generated storage id}}",
  "SignatureToken": "{{Vizibit system generated signature token}}",
  "WorkflowId": "{{Internal workflow id}}"
}

```

```plaintext
Example link
https://esign-lite-demo.signator.eu/?storage_id=a0958fc5a51&signature_token=a0958fc5a5124613b

```
After you receive the following response from our API you just need to format the following URL:

{{**GATEWAYHOST**}}?storage_id={{**StorageId**}}&signature_token={{**SignatureToken**}}


# **eSign-Lite JS SDK**
## eSign-Lite JS SDK introduction
> Embedding eSign-Lite JS SKD

```html
<head>
...
<link href="https://cdn.signumid.hr/download/esign_lite_sdk/dist/index.css" rel="stylesheet" />
...
</head>
<body>
...
<script src="https://cdn.signumid.hr/download/esign_lite_sdk/dist/index.js"></script>
...
</body>
```
**Installation and usage**

In order to use **eSign-Lite** Javascript SDK in your web application/site, it is necessary to embed **eSign-Lite JavaScript** and **CSS** files in your **HTML** document, as shown in example on the right.

There are two **eSign-Lite** Javascript SDK interfaces available:

- **Interface 1**: complete signing process (with PDF preview)
- **Interface 2**: simple signing process (without PDF preview)

## eSign-Lite JS SDK interface
###Interfaces
####Signator.signWithPdfViewer
**Interface 1**

If *userData* object is passed, signature options and signee data will be prefilled and used for signing document.

If *userData* object is undefined, signature options and signee data will be defined as a part of signature process.

> Signator.signWithPdfViewer

```js
Signator.signWithPdfViewer(
{
  endpointUrl: "{{string containing signing service base URL}}",
  storageId: "{{Vizibit system generated storage id}}",
  signatureToken: "{{Vizibit system generated signature token}}",
  signatureImageData: "{{object containing signature image data}"
  userData: "{{object containing signature options and signee data}}",
  onSign: "{{callback function invoked on successful signing of the document}}",
  onError: "{{callback function invoked in case of error}}",
  options: "{{options object}}"
}
)
```
**Input parameters**:

Name | Description
---------- | -------
**endpointUrl**| signing API endpoint URL
**storageId** | document ID from the storage
**signatureToken** | signature JWT token
**signatureImageData** | object containing signature image data, required if using [fastSignOption](#additional-options), otherwise *optional*
**userData** | object containing signature options/user data, required if using [fastSignOption](#additional-options) or [directSignOption](#additional-options), otherwise *optional*
**onSign** | callback function invoked on successful signing of the document, *optional*
**onError** | callback function invoked in case of error, *optional*
**options** | options object, *optional*


####Signator.sign

**Interface 2**

If *userData* object is passed, signature options and signee informations will be prefilled and used for signing document.

If *userData* object is undefined, signature options and informations will be defined as a part of signature process.

> Signator.sign

```js
Signator.sign(
{
  endpointUrl: "{{string containing signing service URL}}",
  signatureToken: "{{Vizibit system generated signature token}}",
  userData: "{{object containing signature options and signee data}}",
  onSign: "{{callback function invoked on successful signing of the document}}",
  onError: "{{callback function invoked in case of error}}",
  options: "{{options object}}"
}
)
```

**Input parameters**:

Name | Description
---------- | -------
**endpointUrl** | signing API endpoint URL
**signatureToken** | signature JWT token
**userData** | object containing signature options/user data,  required if using [directSignOption](#additional-options), otherwise *optional*
**onSign** | callback function invoked on successful signing of the document, *optional*
**onError** | callback function invoked in case of error, *optional*
**options** | options object, *optional*

###Callbacks

**onSign callback**

```js
// Example onSign callback, the file parameter contains a base64 signed document

(file: string) => {
  console.log(file);
}
```

This callback is invoked if document signing was successful and returns signed document in base64 format.

**onError callback**

```js
// Example onError callback, the errorCode parameter contains one of the defined JS error codes

(errorCode: Number) => {
  console.log(errorCode);
}
```
This callback is invoked in case of error during signing process and returns error code in number format.


[Error codes](#simple-signer-js-sdk-interface-error-feedback)


###eSign-Lite JS SDK interface error feedback

Error Code | Meaning
---------- | -------
40000 | Signature provider parameter is not correct
40001 | Jurisdiction parameter is not correct
40002 | Signature level parameter is not correct
40003 | Signature level, provider, jurisdiction and phone number must be provided if using direct signing option
40004 | Missing signature token
40005 | Missing storage ID
40006 | Unable to load document by specified storage ID
40007 | Signature image widget height value is too low or too high
40008 | Signature image widget width value is too low or too high
40100 | Unable to sign document
40200 | User does not have enough credits for signature
40201 | Organization does not have enough credits for signature
40202 | Unable to check available credits for provided phone number
40300 | User does not have valid digital identity required for signing
40400 | Unable to fetch signature image template

###Types
```ts

interface UserData {
 "signatureProvider": 'SwisscomAis'|'CertiliaRdd',
 "mobileNumber": string
 "jurisdiction": 'ZERTES'|'EIDAS'
 "signatureLevel": 'AES'|'QES'
 "reason": string,
 "location": string
}

interface SignatureImageData {
 "LineOne": string
 "LineTwo": string
 "LineThree": string
 "LineFour": string
 "LogoImageData": string
 "Page": number
 "WidgetHeight": number
 "WidgetOffsetX": number
 "WidgetOffsetY": number
 "WidgetWidth": number
}

interface Options {
 "directSignOption": boolean
 "digitalIdentOption": boolean
 "fastSignOption": boolean
 "signatureImageWidth": number
 "signatureImageHeight": number
 "allowSignatureImageResize": boolean
 "language": string
}
```
**Types used in eSign-Lite JS SDK**

Name | Type
---------- | -------
**endpointUrl**  | string
**storageId**  | string
**signatureToken**  | string
**htmlElementId**  | string
**signatureImageData** | SignatureImageData
**userData**  | UserData
**onSign**  | function
**onError**  | function
**options**  | Options

###Additional options

**fastSignOption**

If set to true, this option will preselect all the signature parameters (jurisdiction, provider, level and phone number) and start the document signing automatically after user presses "Sign" button with predefined signature image.
User won't be able to change any of defined signature parameters.
It is required to specify all the signature parameters and signature image data when invoking eSign-Lite interfaces for this option to work.

**directSignOption**

If set to true, this option will preselect all the signature parameters and start the document signing automatically after user presses "Sign" button. End user will be able to define custom signature image.
User won't be able to change any of defined signature parameters.
It is required to specify all the signature parameters (jurisdiction, provider, level and phone number) when invoking eSign-Lite interfaces for this option to work.

**digitalIdentOption**

If set to false, service for digital identity check won't be invoked. In case user doesn't have valid digital identity, document signing will be unsuccessful and error will be thrown.
If set to true and user doesn't have digital identity, digital identity creation wizard will be shown to user.

**signatureImageWidth**

Define default width of signature image widget. Default value is 150, minimum value is 50 and maximum value is 300.

**signatureImageHeight**

Define default height of signature image widget. Default value is 75, minimum value is 25 and maximum value is 150.

**allowSignatureImageResize**

If set to false, end user won't be able to resize signature image widget. Default option is true.

# Prerequisites
> Following examples will use **authorization as query parameter**.

In order to use requests from this documentation, it is necessary to configure an environment defined with parameters such as gateway host and authorization key.

Here's an example of API structure for an endpoint:

**HTTP Request**

`GET {{GATEWAYHOST}}/v/1/signature/workflow/pdf/simple`

In order to test requests in a test environment, you can find demonstrational gateway host in the table below. The required authorization key must be requested from Vizibit company. Once given, the authorization key should be written in a header with **Bearer** key word or as a **query** parameter (authorization_key) in the testing request.

**Query Parameters**

Parameter | Value
--------- | -----------
**GATEWAYHOST** | https://esign-lite-demo.signator.eu
**authorization_key** | Your authorization key. Add in a header of request or as **query** parameter.

