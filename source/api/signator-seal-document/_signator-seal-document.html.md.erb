# **Signator seal document API**

## Introduction

This SDK documentation enables the caller to submit a PDF document to the REST service and receive a signed document in response (Signed using an electronic seal).

- Optionally the caller can define a signature image that needs to be added on the PDF signature.
- Optionally the caller can add **n** images that will be added to the end of the document (2 images per page).
- ExternalSignerRegistryId is a **optional** parameter, and it's **only** available for **on-premise** installations

###Prerequisites
The calling mobile application needs to perform a electronic seal using the supplied SDK, the application needs to be able to:

- Upload a PDF document
- Define a signature image that needs to be attached to the document, caller can define a signature image location or can prepare a signature field in the PDF upon creation of the PDF document
- Upload additional images that will be inserted in the end of the document.
- Upload additional pdfs that will be inserted in the end of the document.

## Seal document REST endpoint
```json
{
  "Document": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
  "ImageAttachments": {
    "Images": [
      {
        "File": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
        "Filename": "image.png",
        "FileType": "JPEG"
      }
    ],
    "AddAsPdfAttachments": false
  },
  "PdfAttachments": {
    "Pdfs": [
      {
        "File": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
        "Filename": "file.pdf"
      }
    ],
    "AddAsPdfAttachments": false
  },
  "SignatureImage": {
    "ImageData": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
    "Page": 1,
    "WidgetOffsetX": 100,
    "WidgetOffsetY": 200,
    "WidgetWidth": 300,
    "WidgetHeight": 150,
    "FileType": "JPEG"
  },
  "SignatureOptions": {
    "Reason": "New contract",
    "Location": "Zurich",
    "SignerContactInfo": "john.doe@example.com, Example ltd.",
    "SignerName": "John Doe"
  },
  "ExternalSignerRegistryId": "RegistryId"
}
```

The **/v/1/integrator/pdf/seal_document** endpoint is the only needed endpoint for applying the electronic seal to the supplied PDF document.

**The endpoint definition is available on the following url:** [Swagger](https://app.swaggerhub.com/apis/fjakelic/Integrator.Pdf.SealDocument/1.0.0)


**The postman collection is available on the following url:** <a href="../resources/Integrator.Pdf.ElectronicSignature.postman_collection.json" download>Postman collection</a>


The following chapters describe the supported scenarios, and the same scenarios are documented in the Postman collection that if supplied with the example documentation.

It’s possible to combine all of the following api parameters the only hard requirement is that you define the "Document" field in the request, because there is no point for an electronic signature without an actual document to sign.

## Invisible signature (Simple electronic seal)
```json
{
  "Document": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
  "ExternalSignerRegistryId": "RegistryId"
}
```
This scenario covers the case where it’s only needed to digitally sign a supplied PDF document with an available electronic seal.

In this case the only required parameter is the actual document that needs to be signed.
## Visible signature (with signature field, with JPEG and PNG)
```json
{
  "Document": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
  "SignatureImage": {
    "ImageData": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
    "FileType": "JPEG or PNG"
  },
  "ExternalSignerRegistryId": "RegistryId"
}
```

This scenario covers the case where we want to sign the document, and have already prepared the signature field in the PDF document. In this case the application detects the position and the size of the signature field.

The backend resizes the image, keeping the aspect ratio and places the signature image in the defined signature field.

## Visible signature (without signature field, with JPEG and PNG)
```json
{
  "Document": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
  "SignatureImage": {
    "ImageData": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
    "FileType": "JPEG or PNG",
    "Page": 1,
    "WidgetOffsetX": 100,
    "WidgetOffsetY": 200,
    "WidgetWidth": 300,
    "WidgetHeight": 150
  },
  "ExternalSignerRegistryId": "RegistryId"
}
```
This scenario covers the case where we want to sign the document, but we have not prepared the signature field in the PDF document.
In this case the application needs the exact upper left coordinates for the x and y axis, and also the width and height of the PDF widget.

The backend resizes the image keeping the aspect ratio, and places the signature image in the document on the defined x,y coordinates with the defined width and height.


## Parameter functionality
#### ExternalSignerRegistryId
ExternalSignerRegistryId is a **optional** parameter, and it's only available for on-premise installations

This parameters allow the caller to switch between multiple signing certificates.

The caller can have an on-premise installation that contains a reference to multiple signing certificates, and using this parameter the caller can choose on of available certificates.


###Image positioning

```json
{
  "SignatureImage": {
    "ImageData": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
    "Page": 1,
    "WidgetOffsetX": 100,
    "WidgetOffsetY": 200,
    "WidgetWidth": 300,
    "WidgetHeight": 150,
    "FileType": "JPEG"
  }
}
```

The image below explains how to position a signature image in a PDF document, when sending a signature image position you need to convert your current viewport to the viewport of the PDF document.

The PDF document is expressed in the coordinate system with the dimensions 612x792 (for A4 document)

You need to send the **WidgetOffsetX** (**LLX** in the image) and **WidgetOffsetY** (**LLY** in the image), as the upper left corner coordinates, an the **WidgetWidth** (**WIDTH** in the image) and **WidgetHeight** (**HEIGHT** in the image) of the widget in the PDF coordinate system.

![Signature positioning](images/signature_positioning.png)

### Adding the image attachments

```json
{

  "SignatureImage": {
    "ImageAttachments": {
      "Images": [{
        "File": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=",
        "FileName":"image.png",
        "FileType": "JPEG or PNG"
      }],
      "AddAsPdfAttachments": false
    }
  }
}

```
All of the above cases support adding image attachments to the document. The attachments are uploaded in the “ImageAttachments” field. This can be added to any of the previous requests as this field is optional.

#### The "AddAsPdfAttachments" flag
The "AddAsPdfAttachments" flag enables the caller to decide how the image attachments should be stored in the document.

- If the "AddAsPdfAttachments" is **false**, the images are added to the end of the document.
- If the "AddAsPdfAttachments" is **true**, the images are added as PDF file attachments.


### Adding the signature options
```json
{
 "SignatureOptions": {
    "Reason": "New contract",
    "Location": "Zurich",
    "SignerContactInfo": "john.doe@example.com, Example ltd.",
    "SignerName": "John Doe"
  }
}
```
All of the above cases support adding the signature options  to the document. The signature options are uploaded in the "SignatureOptions" field. This can be added to any of the previous requests as this field is optional.

###The following flags are supported:
- **Reason** - Textual reason of the signature. This field is visible in the Acrobat Reader
- **Location** - Textual location of the signature. This field is visible in the Acrobat Reader
- **SignerContactInfo** - Pdf standard field form signer contact info of the signature. This field is NOT visible in the Acrobat Reader, but it's machine parsable from the PDF document
- **SignerName** - Pdf standard field form signer author name. This field is **NOT** visible in the Acrobat Reader, but it's machine parsable from the PDF document


###  Adding the pdf attachments
All of the above cases support adding pdf attachments to the document. The attachments are uploaded in the "PdfAttachments" field. This can be added to any of the previous requests as this field is optional.

####  The "AddAsPdfAttachments" flag
```json
{

  "SignatureImage": {
    "PdfAttachments": {
      "Pdfs": [{"File": "JVBERi0xLjUKJ … shortened … 3MAolJUVPRgo=", "FileName":"file.pdf"}],
      "AddAsPdfAttachments": false
    }
  }
}

```
The "AddAsPdfAttachments" flag enables the caller to decide how the pdf attachments should be stored in the document.

- If the "AddAsPdfAttachments" is **false**, the pdfs are added to the end of the document.
- If the "AddAsPdfAttachments" is **true**, the pdfs are added as PDF file attachments.

##Error codes
```json
{
  "info": "Unable to fetch the certificate data",
  "errors": [
    {
      "errorCode": 10100
    }
  ]
}
```

All errors return the HTTP status code 400, unless an unforeseen situation has occurred. In that case HTTP status code is 500.

All errors are returned as **JSON**.

List of possible errors on seal document workflow interface

Error Code | Meaning
---------- | -------
10100 | A pdf document is required to to perform a electronic seal
10101 | Unsupported signature method
10102 | Unable to position the signature image without the location data
10103  | Unsupported image file format
10104  |All image attachments needs to have the binary data defined
10105  |All supplied images need to have a filename defined if they are being added to the document as Pdf attachment)
10106  |Unable to sign a encrypted PDF document
10107  |Unable to sign a password protected PDF document
10108  |Pdf document not supported for signature
10109  |Pdf document not readable or invalid
10110  |Signature field must be present in the document to assign the signature image to the document
10111  |Unable to fetch the certificate data
10112   |Pdf document not readable or invalid
10113  |Unable to parse the supplied certificate bytes
10114  |All supplied images need to have a fileType defined if they are being added to the document
10115  |Unhandled signature error
10125  |All Pdf attachments require binary data
10126  |All Pdf Attachment Require Filename To Be Added as attachments
10127  |Unsupported Pdf format

In case of an error, the processing is interrupted and the error response is returned to the caller.

# Prerequisites
> Following examples will use **authorization as query parameter**.

In order to use requests from this documentation, it is necessary to configure an environment defined with parameters such as gateway host and authorization key.

Here's an example of API structure for an endpoint:

**HTTP Request**

`GET {{GATEWAYHOST}}/v/1/integrator/pdf/seal_document`

In order to test requests in a test environment, you can find demonstrational gateway host in the table below. The required authorization key must be requested from Vizibit company. Once given, the authorization key should be written in a header with **Bearer** key word or as a **query** parameter (authorization_key) in the testing request.

**Query Parameters**

Parameter | Value
--------- | -----------
**GATEWAYHOST** | https://demo.signator.eu
**authorization_key** | Your authorization key. Add in a header of request or as **query** parameter.

